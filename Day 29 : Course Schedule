/* TOPOLOGICAL SORT
There are a total of numCourses courses you have to take, labeled from 0 to numCourses-1.

Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?

 

Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0. So it is possible.
Example 2:

Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0, and to take course 0 you should
             also have finished course 1. So it is impossible.

*/
class Solution {
public:
    bool canFinish(int V, vector<vector<int>>& prerequisites) {
     vector<int>indegree(V,0);
        //make graph
        vector<vector<int>> adj(V); //adj list
        
        for(int i=0;i<prerequisites.size();i++){
            adj[prerequisites[i][0]].push_back(prerequisites[i][1]);
        }
        //kahns
    for(int u=0; u<V ; u++){
        for(int v=0;v<adj[u].size();v++){
            indegree[adj[u][v]]++;
        }
    }
    int cnt=0;
    queue<int>q;
    for(int i=0;i<V;i++) 
     if(indegree[i]==0) 
        q.push(i);
    while(!q.empty()){
        int node=q.front();
        q.pop();
        for(auto i=adj[node].begin();i!=adj[node].end();i++){
            if(--indegree[*i]==0)
            q.push(*i);
        }
        cnt++;
    }
        if(cnt!=V) return false;
        return true;
    }
};
