/*
In a binary tree, the root node is at depth 0, and children of each depth k node are at depth k+1.

Two nodes of a binary tree are cousins if they have the same depth, but have different parents.

We are given the root of a binary tree with unique values, and the values x and y of two different nodes in the tree.

Return true if and only if the nodes corresponding to the values x and y are cousins.

Example 1:

Input: root = [1,2,3,4], x = 4, y = 3
Output: false
Example 2:

Input: root = [1,2,3,null,4,null,5], x = 5, y = 4
Output: true
Example 3:

Input: root = [1,2,3,null,4], x = 2, y = 3
Output: false
 
Note:

The number of nodes in the tree will be between 2 and 100.
Each node has a unique integer value from 1 to 100.
*/

class Solution {
public:
    bool isCousins(TreeNode* root, int x, int y) {
        queue<pair<TreeNode*,int>>q;
        q.push({root,0});
        while(!q.empty()){
            unordered_map<int,int>s;
            int count=q.size();
            while(count--){
                TreeNode* top=q.front().first;
                int d=q.front().second;
                q.pop();
                if(top->left){
                    q.push({top->left,d+1});
                    s.insert({top->left->val,top->val});
                }
                if(top->right){
                    q.push({top->right,d+1});
                    s.insert({top->right->val,top->val});
                }
            }
            if(s.find(x)!=s.end()&&s.find(y)!=s.end()){
                if(s[x]!=s[y])
                return true;
            }
        }
        return false;
    }
};
