/*
Return the root node of a binary search tree that matches the given preorder traversal.

(Recall that a binary search tree is a binary tree where for every node, any descendant of node.left 
has a value < node.val, and any descendant of node.right has a value > node.val.  Also recall that a preorder 
traversal displays the value of the node first, then traverses node.left, then traverses node.right.)

It's guaranteed that for the given test cases there is always possible to find a binary search tree with the given requirements.

Example 1:

Input: [8,5,1,7,10,12]
Output: [8,5,10,1,7,null,12]

*/
class Solution {
public:
    TreeNode* util(TreeNode* root,vector<int>preorder,int &i,int low,int high){
        if(preorder.size()==i) return NULL;
        if(preorder[i]<low||preorder[i]>high)
            return NULL;
        int v=preorder[i];
        root=new TreeNode(v);
        i++;
        root->left= util(root->left,preorder,i,low,v);
        root->right=util(root->left,preorder,i,v,high);
        return root;
    }
    
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        TreeNode* root;
        int i=0;
        return util(root,preorder,i,INT_MIN,INT_MAX);
    }
};
