/*
Implement a trie with insert, search, and startsWith methods.

Example:

Trie trie = new Trie();

trie.insert("apple");
trie.search("apple");   // returns true
trie.search("app");     // returns false
trie.startsWith("app"); // returns true
trie.insert("app");   
trie.search("app");     // returns true
Note:

You may assume that all inputs are consist of lowercase letters a-z.
All inputs are guaranteed to be non-empty strings.
*/
class Trie {
public:
    /** Initialize your data structure here. */
    struct TrieNode{
        TrieNode* children [26];
        char data;
        bool end;
        TrieNode(char c){
        for(int i=0;i<26;i++)
            children[i]=NULL;
            data=c;
            end=false;
        }
    };
    TrieNode* root;
    Trie() {
        root = new TrieNode('#');
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        TrieNode* temp=root;
        int len = word.length();
        for(int i=0;i<len;i++){
            if(temp->children[word[i]-'a']==NULL){
                temp->children[word[i]-'a']=new TrieNode(word[i]);
            }
            temp=temp->children[word[i]-'a'];
            if(i==len-1) temp->end=true;
        }
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        TrieNode* temp=root;
        int len=word.length();
        for(int i=0;i<len;i++){
            if(temp->children[word[i]-'a']==NULL){
                return false;
            }
            temp=temp->children[word[i]-'a'];
            if(i==len-1) return temp->end==true;
        }
        return true;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        TrieNode* temp=root;
        int len=prefix.length();
        for(int i=0;i<len;i++){
            if(temp->children[prefix[i]-'a']==NULL){
                return false;
            }
            temp=temp->children[prefix[i]-'a'];
        }
        return true;
    }
};
